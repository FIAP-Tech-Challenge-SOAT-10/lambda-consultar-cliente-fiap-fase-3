name: Deploy Lambda Function

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      run: npm install

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Store MySQL parameters in SSM
      run: |
        aws ssm put-parameter --name "/lambda-consultar-cliente/prod/mysql/host" --value "${{ secrets.MYSQL_HOST }}" --type SecureString --overwrite
        aws ssm put-parameter --name "/lambda-consultar-cliente/prod/mysql/user" --value "${{ secrets.MYSQL_USER }}" --type SecureString --overwrite
        aws ssm put-parameter --name "/lambda-consultar-cliente/prod/mysql/password" --value "${{ secrets.MYSQL_PASSWORD }}" --type SecureString --overwrite
        aws ssm put-parameter --name "/lambda-consultar-cliente/prod/mysql/database" --value "${{ secrets.MYSQL_DATABASE }}" --type SecureString --overwrite
        aws ssm put-parameter --name "/lambda-consultar-cliente/prod/mysql/port" --value "${{ secrets.MYSQL_PORT }}" --type SecureString --overwrite

    - name: Deploy to AWS Lambda
      run: |
        npx serverless deploy --verbose --stage prod \
          --param="mysql_host=${{ secrets.MYSQL_HOST }}" \
          --param="mysql_user=${{ secrets.MYSQL_USER }}" \
          --param="mysql_password=${{ secrets.MYSQL_PASSWORD }}" \
          --param="mysql_database=${{ secrets.MYSQL_DATABASE }}" \
          --param="mysql_port=${{ secrets.MYSQL_PORT }}"

    - name: Cleanup
      if: always()
      run: |
        rm -rf .serverless
        rm -rf node_modules
        rm -rf .venv
